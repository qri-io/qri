// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dscachefb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RefEntryInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsRefEntryInfo(buf []byte, offset flatbuffers.UOffsetT) *RefEntryInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RefEntryInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RefEntryInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RefEntryInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RefEntryInfo) InitID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RefEntryInfo) ProfileID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RefEntryInfo) TopIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RefEntryInfo) MutateTopIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *RefEntryInfo) CursorIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RefEntryInfo) MutateCursorIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *RefEntryInfo) PrettyName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RefEntryInfo) Published() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *RefEntryInfo) MutatePublished(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *RefEntryInfo) Foreign() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *RefEntryInfo) MutateForeign(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *RefEntryInfo) MetaTitle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RefEntryInfo) ThemeList() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RefEntryInfo) BodySize() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RefEntryInfo) MutateBodySize(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *RefEntryInfo) BodyRows() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RefEntryInfo) MutateBodyRows(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *RefEntryInfo) BodyFormat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RefEntryInfo) NumErrors() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RefEntryInfo) MutateNumErrors(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

func (rcv *RefEntryInfo) CommitTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RefEntryInfo) MutateCommitTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *RefEntryInfo) NumVersions() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RefEntryInfo) MutateNumVersions(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

func (rcv *RefEntryInfo) HeadRef() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RefEntryInfo) FsiPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func RefEntryInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func RefEntryInfoAddInitID(builder *flatbuffers.Builder, initID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(initID), 0)
}
func RefEntryInfoAddProfileID(builder *flatbuffers.Builder, profileID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(profileID), 0)
}
func RefEntryInfoAddTopIndex(builder *flatbuffers.Builder, topIndex int32) {
	builder.PrependInt32Slot(2, topIndex, 0)
}
func RefEntryInfoAddCursorIndex(builder *flatbuffers.Builder, cursorIndex int32) {
	builder.PrependInt32Slot(3, cursorIndex, 0)
}
func RefEntryInfoAddPrettyName(builder *flatbuffers.Builder, prettyName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(prettyName), 0)
}
func RefEntryInfoAddPublished(builder *flatbuffers.Builder, published bool) {
	builder.PrependBoolSlot(5, published, false)
}
func RefEntryInfoAddForeign(builder *flatbuffers.Builder, foreign bool) {
	builder.PrependBoolSlot(6, foreign, false)
}
func RefEntryInfoAddMetaTitle(builder *flatbuffers.Builder, metaTitle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(metaTitle), 0)
}
func RefEntryInfoAddThemeList(builder *flatbuffers.Builder, themeList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(themeList), 0)
}
func RefEntryInfoAddBodySize(builder *flatbuffers.Builder, bodySize int64) {
	builder.PrependInt64Slot(9, bodySize, 0)
}
func RefEntryInfoAddBodyRows(builder *flatbuffers.Builder, bodyRows int32) {
	builder.PrependInt32Slot(10, bodyRows, 0)
}
func RefEntryInfoAddBodyFormat(builder *flatbuffers.Builder, bodyFormat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(bodyFormat), 0)
}
func RefEntryInfoAddNumErrors(builder *flatbuffers.Builder, numErrors int32) {
	builder.PrependInt32Slot(12, numErrors, 0)
}
func RefEntryInfoAddCommitTime(builder *flatbuffers.Builder, commitTime int64) {
	builder.PrependInt64Slot(13, commitTime, 0)
}
func RefEntryInfoAddNumVersions(builder *flatbuffers.Builder, numVersions int32) {
	builder.PrependInt32Slot(16, numVersions, 0)
}
func RefEntryInfoAddHeadRef(builder *flatbuffers.Builder, headRef flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(headRef), 0)
}
func RefEntryInfoAddFsiPath(builder *flatbuffers.Builder, fsiPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(fsiPath), 0)
}
func RefEntryInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
